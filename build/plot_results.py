#!/usr/bin/env python3
import seaborn as sns
import matplotlib.pyplot as plt
import os ,sys

# Dictionary to hold throughput values 
throughput_vals = {}
space_savings_vals = {}
dataset_name = ""

rename_dict = { "aemin":"AE-Min",
                "aemax":"AE-Max",
                "crc32":"CRC32",
                "fastcdc":"FastCDC",
                "gear":"Gear",
                "maxp":"MAXP",
                "rabins":"Rabin",
                "ram":"RAM",
                "seqcdc":"SeqCDC",
                "tttd":"TTTD",
                "vaemax128":"VAEMax-128",
                "vaemax256":"VAEMax-256",
                "vaemax512":"VAEMax-512",                
                "vaemin128":"VAEMin-128",
                "vaemin256":"VAEMin-256",
                "vaemin512":"VAEMin-512",
                "vmaxp128":"VMAXP-128",
                "vmaxp256":"VMAXP-256",
                "vmaxp512":"VMAXP-512",
                "vram128":"VRAM-128",
                "vram256":"VRAM-256",
                "vram512":"VRAM-512",
}

def build_custom_order(keys):
    custom_order = []
    if("CRC32" in keys):
        custom_order.append("CRC32")
    if("FastCDC" in keys):
        custom_order.append("FastCDC")
    if("Gear" in keys):
        custom_order.append("Gear")
    if("Rabin" in keys):
        custom_order.append("Rabin")
    if("TTTD" in keys):
        custom_order.append("TTTD")
    
    if("AE-Max" in keys):
        custom_order.append("AE-Max")
    if("VAEMax-128" in keys):
        custom_order.append("VAEMax-128")
    if("VAEMax-256" in keys):
        custom_order.append("VAEMax-256")
    if("VAEMax-512" in keys):
        custom_order.append("VAEMax-512")
    
    if("AE-Min" in keys):
        custom_order.append("AE-Min")
    if("VAEMin-128" in keys):
        custom_order.append("VAEMin-128")
    if("VAEMin-256" in keys):
        custom_order.append("VAEMin-256")
    if("VAEMin-512" in keys):
        custom_order.append("VAEMin-512")
    
    if("MAXP" in keys):
        custom_order.append("MAXP")
    if("VMAXP-128" in keys):
        custom_order.append("VMAXP-128")
    if("VMAXP-256" in keys):
        custom_order.append("VMAXP-256")
    if("VMAXP-512" in keys):
        custom_order.append("VMAXP-512")
    
    if("RAM" in keys):
        custom_order.append("RAM")
    if("VRAM-128" in keys):
        custom_order.append("VRAM-128")
    if("VRAM-256" in keys):
        custom_order.append("VRAM-256")
    if("VRAM-512" in keys):
        custom_order.append("VRAM-512")
    
    if("SeqCDC" in keys):
        custom_order.append("SeqCDC")
    
    for key in keys:
        if(key not in rename_dict.keys()):
            custom_order.append(key)

    return custom_order


# Read results.txt generated by dedup_script.sh
def read_src_throughput(results_file_path):
    global throughput_vals, dataset_name
    with open(results_file_path, 'r') as results_file:
        curr_algo = None
        curr_throughput = None
        for line in results_file:
            if("Dataset path:" in line):
                dataset_name = line.split(":")[1].strip()
                if(dataset_name[-1] == "/"):
                    dataset_name = dataset_name[:-1]
                dataset_name = os.path.basename(dataset_name)
            if(".conf" in line):
                curr_algo = line.strip().split(".")[0].strip().split("_")[0].strip()
                if(curr_algo in rename_dict.keys()):
                    curr_algo = rename_dict[curr_algo]
            elif("Chunking Throughput" in line):
                curr_throughput = float(line.strip().split(":")[1].strip()) / 1000 # Convert throughput to GB/s
                if(curr_algo == None):
                    raise Exception("Throughput value detected but no chunking technique? Check results file format for errors.")
                throughput_vals[curr_algo] = curr_throughput
                curr_throughput = None
                curr_algo = None

def read_src_spacesavings(results_file_path):
    global space_savings_vals
    with open(results_file_path, 'r') as results_file:
        curr_algo = None
        space_savings = None
        for line in results_file:
            if(".conf" in line):
                curr_algo = line.strip().split(".")[0].strip().split("_")[0].strip()
                if(curr_algo in rename_dict.keys()):
                    curr_algo = rename_dict[curr_algo]
            elif("Space savings" in line):
                space_savings = float(line.strip().split(":")[1].strip().strip("%"))
                if(curr_algo == None):
                    raise Exception("Space savings value detected but no chunking technique? Check results file format for errors.")
                space_savings_vals[curr_algo] = space_savings
                space_savings = None
                curr_algo = None

# Plot bar graph
def plot_results():
    global throughput_vals
    sns.set_style('darkgrid')
    sns.set_context("poster")
    plt.rcParams['figure.dpi'] = 300
    plt.tick_params(axis='x', labelsize=26)
    plt.tick_params(axis='y', labelsize=26)
    
    fig, ax = plt.subplots(2, 1, figsize=(32, 24))

    custom_order = build_custom_order(space_savings_vals.keys())

    sns.barplot(x = space_savings_vals.keys(), y = space_savings_vals.values(), ax=ax[0], gap=0.5, hue=space_savings_vals.keys(), legend=False, palette="inferno", edgecolor='black', order=custom_order, hue_order=custom_order)
    ax[0].set_xlabel("CDC Algorithm", fontsize=30)
    ax[0].set_ylabel("Space Savings (%)", fontsize=30)
    ax[0].set_title("Space Savings", fontsize=45)
    
    custom_order = build_custom_order(throughput_vals.keys())

    sns.barplot(x = throughput_vals.keys(), y = throughput_vals.values(), ax=ax[1], gap=0.5, hue=throughput_vals.keys(), legend=False, palette="inferno", edgecolor='black', order=custom_order, hue_order=custom_order)
    ax[1].set_xlabel("CDC Algorithm", fontsize=30)
    ax[1].set_ylabel("Throughput (GB/s)", fontsize=30)
    ax[1].set_title("Chunking Throughput", fontsize=45)

    plt.suptitle("Dataset statistics for " + dataset_name, fontsize=60)
    plt.tight_layout()
    
    plt.savefig('results_graph.png')

    

    
if(__name__ == "__main__"):
    if(len(sys.argv) != 2):
        print("Usage: python3 plot_results.py <path_to_results>")
        print("\t <path_to_results>: Path to results.txt file generated by dedup_script.sh")
        sys.exit(0)
    
    results_path = sys.argv[1]
    read_src_throughput(results_path)
    read_src_spacesavings(results_path)
    plot_results()

    print("Throughput and space savings graphs plotted and saved as results_graph.png.")

